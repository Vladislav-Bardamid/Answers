{
  "questions": [
    {
      "Text": "1. Главными областями программной инженерии согласно SWEBOK являются:",
      "Variants": [
        "конструирование ПО",
        "инженерия требований"
      ]
    },
    {
      "Text": "2. Организационными областями программной инженерии согласно SWEBOK являются:",
      "Variants": [
        "управление конфигурацией",
        "процесс инженерии ПС"
      ]
    },
    {
      "Text": "3. Главными областями программной инженерии согласно SWEBOK не являются:",
      "Variants": [
        "управление конфигурацией",
        "процесс инженерии ПС"
      ]
    },
    {
      "Text": "4. Валидация требований - это:",
      "Variants": [
        "процесс выявления ошибок в представлении сценарных требований"
      ]
    },
    {
      "Text": "5. Основные систематические методы обеспечения правильности программ включают в себя:",
      "Variants": [
        "верификация компонентов",
        "валидация требований"
      ]
    },
    {
      "Text": "6. Для каких задач управления проектом используется диаграмма Ганта?",
      "Variants": [
        "планирование проекта и составление графиков работ выполнения проекта"
      ]
    },
    {
      "Text": "7. Управление проектом - это:",
      "Variants": [
        "руководство работами команды исполнителей проекта для реализации проекта с использованием методов управления, планирования и контроля работ, управление рисками, эффективной организацией работы и коммуникационными потоками в команде исполнителей"
      ]
    },
    {
      "Text": "8. Планирование - это:",
      "Variants": [
        "процесс распределения и назначения ресурсов (материальных и людских) с учетом стоимости и времени выполнения проекта"
      ]
    },
    {
      "Text": "9. Основными составляющими любого проекта являются:",
      "Variants": [
        "ресурсы (людские, финансовые, технические)",
        "время выполнения проекта",
        "стоимость выполнения проекта"
      ]
    },
    {
      "Text": "10. Ответственность за координацию и реализацию основных составляющих проекта несет:",
      "Variants": [
        "менеджер проекта"
      ]
    },
    {
      "Text": "11. Ответственность за идейную, функциональную сторону проекта несет:",
      "Variants": [
        "главный программист"
      ]
    },
    {
      "Text": "12. Диаграмма Ганта - это:",
      "Variants": [
        "линейная диаграмма, на которой задачи проекта представляются сроками в виде отрезков времени, включают даты начала и окончания выполнения задач с учетом возможных задержек или других временных параметров"
      ]
    },
    {
      "Text": "13. Состав и количество сотрудников, входящих в команду проекта, зависит от:",
      "Variants": [
        "масштаба работ",
        "опыта сотрудников"
      ]
    },
    {
      "Text": "14. Риски могут быть:",
      "Variants": [
        "\"известные\", которые можно планировать",
        "\"неизвестные\", которые не идентифицированы и не могут быть спрогнозированы"
      ]
    },
    {
      "Text": "15. Планирование управления рисками - это:",
      "Variants": [
        "процесс принятия решений по применению и планированию управления рисками для конкретного проекта"
      ]
    },
    {
      "Text": "16. Количественная оценка рисков - это:",
      "Variants": [
        "процесс определения вероятности возникновения рисков, влияния последствий рисков на проект и принятия решений по оценке риска"
      ]
    },
    {
      "Text": "17. Определение требований, как правило, проводится:",
      "Variants": [
        "путем обсуждения взглядов заказчика на систему с будущими ее разработчиками"
      ]
    },
    {
      "Text": "18. Требования к ПО состоят из:",
      "Variants": [
        "системных требований",
        "функциональных требований",
        "нефункциональных требований"
      ]
    },
    {
      "Text": "19. Нефункциональные требования для большинства современных многопользовательских ПС включают следующие условия и ограничения:",
      "Variants": [
        "конфиденциальность, безопасность и защита данных",
        "одновременность доступа к системе пользователей",
        "отказоустойчивость",
        "производительность"
      ]
    },
    {
      "Text": "20. Нефункциональные требования определяют:",
      "Variants": [
        "пользовательские потребности к условиям и среде выполнения функцийY"
      ]
    },
    {
      "Text": "21. Требования пользователей определяют:",
      "Variants": [
        "цели и задачи, которые пользователям позволит решать будущая система"
      ]
    },
    {
      "Text": "22. Функциональные требования определяют:",
      "Variants": [
        "перечень функций или сервисов, которые должна выполнять система, а также ограничений на данные и поведение системы"
      ]
    },
    {
      "Text": "23. Системные требования определяют:",
      "Variants": [
        "внешние условия для выполнения системных функций и ограничений на создаваемый продукт, а также требования к описанию подсистем"
      ]
    },
    {
      "Text": "24. В обсуждении требований на систему принимают участие:",
      "Variants": [
        "представители заказчика из нескольких профессиональных групп",
        "представители заказчика из нескольких профессиональных групп"
      ]
    },
    {
      "Text": "25. Что дает согласованная область действий по проекту?",
      "Variants": [
        "возможность оценить требуемые инвестиции в проект"
      ]
    },
    {
      "Text": "26. Спецификация требований к ПО - это:",
      "Variants": [
        "формализованное описание функциональных, нефункциональных и системных требований, требований к характеристикам качества, а также к структуре ПО, принципам взаимодействия с другими компонентами, алгоритмам и структуре данных системы"
      ]
    },
    {
      "Text": "27. Инструментальные средства разработки ПО - это:",
      "Variants": [
        "организационные средства планирования и отбора тестов для программ",
        "средства поддержки кодирования и тестирования (компиляторы, генераторы программ, отладчики и др)"
      ]
    },
    {
      "Text": "28. Теоретические средства разработки ПО - это:",
      "Variants": [
        "методы верификации и доказательства правильности спецификации программ",
        "метрики измерения (Холстеда, цикломатичная сложность Маккейба и др)"
      ]
    },
    {
      "Text": "29. Цель процесса валидации:",
      "Variants": [
        "убедиться, что специфические требования для программного продукта выполнены"
      ]
    },
    {
      "Text": "30. Отладка - это:",
      "Variants": [
        "убедиться, что специфические требования для программного продукта выполнены"
      ]
    },
    {
      "Text": "31. Инспекция ПО - это:",
      "Variants": [
        "статическая проверка соответствия программы заданным спецификациями"
      ]
    },
    {
      "Text": "32. Статический анализ заключается в:",
      "Variants": [
        "инспекции исходного кода и сквозного контроля программы"
      ]
    },
    {
      "Text": "33. Динамические методы тестирования используются:",
      "Variants": [
        "в процессе выполнения программ"
      ]
    },
    {
      "Text": "34. Систематические методы тестирования делятся на следующие методы:",
      "Variants": [
        "метод \"черного ящика\"",
        "метод \"белого ящика\""
      ]
    },
    {
      "Text": "35. Функциональные тесты создаются по:",
      "Variants": [
        "внешним спецификациям функций",
        "проектной информации",
        "тексту на языке программирования"
      ]
    },
    {
      "Text": "36. Все ошибки, которые возникают в программах, принято подразделять на следующие классы:",
      "Variants": [
        "логические и функциональные ошибки",
        "ошибки интерфейсов"
      ]
    },
    {
      "Text": "37. В соответствии с международным стандартом ANSI/IEEE-729-83 Ошибка (error) - это:",
      "Variants": [
        "состояние программы, при котором выдаются неправильные результаты, причиной которых являются изъяны в операторах программы или в технологическом процессе ее разработки"
      ]
    },
    {
      "Text": "38. В соответствии с международным стандартом ANSI/IEEE-729-83 дефект (fault) - это:",
      "Variants": [
        "следствие ошибок разработчика на любом из этапов разработки, которая может содержаться в исходных или проектных спецификациях, текстах кодов программ, эксплуатационной документация и тп."
      ]
    },
    {
      "Text": "39. В соответствии с международным стандартом ANSI/IEEE-729-83 Отказ (failure) - это:",
      "Variants": [
        "отклонение программы от функционирования или невозможность программы выполнять функции, определенные требованиями и ограничениями"
      ]
    },
    {
      "Text": "40. В обязанности инженера-тестировщика входят:",
      "Variants": [
        "оценка тестов",
        "создание тестовых сценариев",
        "составление плана теста"
      ]
    },
    {
      "Text": "41. В обязанности инженера-тестировщика не входят:",
      "Variants": [
        "исправление ошибок, выявленных на этапе тестирования"
      ]
    },
    {
      "Text": "42. RUP (Rational Unified Process) - это:",
      "Variants": [
        "процесс моделирования и построения ПС из объектов с применением языка UML"
      ]
    },
    {
      "Text": "43. Модель процесса разработки ПО - это:",
      "Variants": [
        "модель, определяющая структуру процессов и руководство ими в течение всего времени жизни проекта"
      ]
    },
    {
      "Text": "44. Модель управления рисками - это:",
      "Variants": [
        "модель, с помощью которой определяется порядок и условия реализации упреждающих решений и мер по выявлению наиболее существенных моментов риска"
      ]
    },
    {
      "Text": "45. Модель процесса проектирования - это:",
      "Variants": [
        "модель, определяющая цели и задачи процесса разработки производственной архитектуры с параллельным и итерационным выполнением отдельных работ"
      ]
    },
    {
      "Text": "46. Модель проектной группы - это:",
      "Variants": [
        "модель, определяющая роли, обязанности каждого участника проекта и распределение между ними ответственности"
      ]
    },
    {
      "Text": "47. Реинженерия (reengineering) - это:",
      "Variants": [
        "эволюция программы путем ее изменения в целях повышения удобства ее эксплуатации, сопровождения или изменения ее функций"
      ]
    },
    {
      "Text": "48. По сравнению с более радикальными подходами к совершенствованию систем реинженерия имеет следующие преимущества:",
      "Variants": [
        "снижение риска при повторной разработке ПС",
        "снижение затрат за счет использования компонентов повторного использования при разработке новой ПС"
      ]
    },
    {
      "Text": "49. Причины, требующие преобразования исходного кода программ в другой язык, могут быть:",
      "Variants": [
        "обновление платформы аппаратных средств, на которой может не выполняться компилятор языка программирования",
        "изменение структуры программы в связи с переходом на новый стандартный язык программирования",
        "недостаток квалифицированного персонала для программ, написанных в ЯП, вышедших из употребления"
      ]
    },
    {
      "Text": "50. Операции рефакторинга над компонентами удовлетворяют условиям:",
      "Variants": [
        "операция не изменяет функциональность компонента и новый компонент может применяться в ранее построенных компонентных системах"
      ]
    },
    {
      "Text": "51. Требования - это:",
      "Variants": [
        "свойства, которыми должно обладать ПО для адекватного определения функций, условий и ограничений выполнения ПО, а также объемов данных, технического обеспечения и среды функционирования"
      ]
    },
    {
      "Text": "52. Процесс проверки правильности спецификаций требований на их соответствие, непротиворечивость, полноту и выполнимость, а также на соответствие стандартам - это:",
      "Variants": [
        "верификация требований"
      ]
    },
    {
      "Text": "53. Проектирование ПО - это::",
      "Variants": [
        "процесс определения архитектуры, компонентов, интерфейсов, других характеристик системы и конечного состава программного продукта"
      ]
    },
    {
      "Text": "54. Конструирование ПО - это:",
      "Variants": [
        "создание работающего ПО с привлечением методов верификации, кодирования и тестирования компонентов"
      ]
    },
    {
      "Text": "55. Тестирование ПО - это:",
      "Variants": [
        "процесс проверки готовой программы в статике и в динамике путем прогона конечного набора тестовых данных, проверяющих разные пути выполнения программы и сравнении полученных результатов с заранее запланированными"
      ]
    },
    {
      "Text": "56. Тестирование эффективности ПО позволяет проверить:",
      "Variants": [
        "производительность",
        "максимальный объем данных"
      ]
    },
    {
      "Text": "57. Тестирование эффективности ПО не позволяет проверить",
      "Variants": [
        "максимально допустимую нагрузку",
        "работу системы на различных конфигурациях аппаратуры"
      ]
    },
    {
      "Text": "58. Чем считается сопровождение в соответствии со стандартами ISO/IEC 12207 и ISO/IEC 14764?",
      "Variants": [
        "модификацией программного продукта в процессе эксплуатации при условии сохранения целостности продукта"
      ]
    },
    {
      "Text": "59. Реорганизация кода для улучшения характеристик и показателей качества программ без изменения их поведения - это:",
      "Variants": [
        "Рефакторинг"
      ]
    },
    {
      "Text": "60. Сборка ПО - это:",
      "Variants": [
        "объединение корректных элементов ПО и конфигурационных данных в единую исполняемую программу"
      ]
    },
    {
      "Text": "61. Качество ПО - это:",
      "Variants": [
        "набор свойств продукта, которые характеризуют его способность удовлетворить установленные или предполагаемые потребности заказчика"
      ]
    },
    {
      "Text": "62. К характеристикам качества ПО относят:",
      "Variants": [
        "эффективность",
        "надежность",
        "переносимость",
        "функциональность"
      ]
    },
    {
      "Text": "63. Деятельности и техники гарантии качества включают:",
      "Variants": [
        "инспекцию ПО",
        "валидацию ПО"
      ]
    },
    {
      "Text": "64. Жизненный цикл программной системы - это:",
      "Variants": [
        "определенная последовательность процессов (этапов), начиная от постановки задачи до ее воплощения в готовую программу, эксплуатации и изъятия из эксплуатации"
      ]
    },
    {
      "Text": "65. Главная цель объектного анализа - это:",
      "Variants": [
        "представить предметную область как множество объектов со свойствами и характеристиками, которые достаточны для их определения и идентификации, а также для задания поведения объектов в рамках выбранной системы понятий и абстракций"
      ]
    },
    {
      "Text": "66. Задачи проектирования - это:",
      "Variants": [
        "преобразование требований к системе в требования к ПО"
      ]
    },
    {
      "Text": "67. Архитектура системы - это:",
      "Variants": [
        "структурная схема компонентов системы, взаимодействующих между собой через интерфейсы"
      ]
    },
    {
      "Text": "68. Условия построения архитектуры системы включают в себя:",
      "Variants": [
        "декомпозиция системы на компоненты или модули",
        "иерархическое представление абстракции системы и скрытие тех деталей, которые будут отработаны на следующих уровнях",
        "определение входных и выходных данных"
      ]
    },
    {
      "Text": "69. Требования, предъявляемые к качеству ПО, ставятся в соответствии с:",
      "Variants": [
        "условиями применения"
      ]
    },
    {
      "Text": "70. Качество ПО - это:",
      "Variants": [
        "совокупность свойств, которые обеспечивают его способность удовлетворять потребности заказчика в соответствии с назначением"
      ]
    },
    {
      "Text": "71. Функциональность - это:",
      "Variants": [
        "совокупность свойств, определяющих способность ПО выполнять определенный перечень функций, которые удовлетворяют потребностям в соответствии с назначением"
      ]
    },
    {
      "Text": "72. Надежность - это:",
      "Variants": [
        "группа свойств, обусловливающая способность ПО сохранять работоспособность и преобразовывать исходные данные в результат за установленный период времени, характер отказов которого является следствием внутренних дефектов и условий его применения"
      ]
    },
    {
      "Text": "73. Удобство применения - это:",
      "Variants": [
        "совокупность свойств ПО для предполагаемого круга пользователей и отражающих легкость его освоения и адаптации к изменяющимся условиям эксплуатации, стабильность работы и подготовки данных, понимаемость результатов, удобства внесения изменений в программную документацию и в программы"
      ]
    },
    {
      "Text": "74. Сопровождаемость - это:",
      "Variants": [
        "группа свойств, определяющая усилия, необходимые для выполнения, приспособленность к диагностике отказов и последствий внесения изменений, модификации и аттестации модифицируемого ПО"
      ]
    },
    {
      "Text": "75. Рациональность - это:",
      "Variants": [
        "группа свойств, характеризующаяся степенью соответствия используемых ресурсов среды функционирования уровню качества (надежности) функционирования ПО при заданных условиях применения"
      ]
    },
    {
      "Text": "76. Переносимость - это:",
      "Variants": [
        "группа свойств ПО, обеспечивающая его приспособленность для переноса из одной среды функционирования в другие, усилия для переноса и адаптацию ПО к новой среде функционирования"
      ]
    },
    {
      "Text": "77. К подхарактеристикам надежности ПО не относятся",
      "Variants": [
        "функциональная полнота"
      ]
    },
    {
      "Text": "78. К подхарактеристикам надежности ПО относятся",
      "Variants": [
        "безотказность",
        "устойчивость к ошибкам",
        "восстанавливаемость"
      ]
    },
    {
      "Text": "79. Достижение надежности ПО обеспечивается:",
      "Variants": [
        "предотвращением отказа",
        "устранением отказа",
        "оценкой возможности появления новых отказов и мер борьбы с ними"
      ]
    },
    {
      "Text": "80. Метрики программного продукта включают:",
      "Variants": [
        "внешние метрики, обозначающие свойства продукта, видимые пользователю",
        "внутренние метрики, обозначающие свойства, видимые только команде разработчиков"
      ]
    },
    {
      "Text": "81. Внутренние метрики продукта включают:",
      "Variants": [
        "метрики размера",
        "метрики сложности",
        "метрики стиля"
      ]
    },
    {
      "Text": "82. Наработка на отказ как атрибут надежности определяет:",
      "Variants": [
        "среднее время между появлением угроз"
      ]
    },
    {
      "Text": "83. При подходе, ориентированном на продукт, оценка качества проводится после испытания ПС. Этот подход базируется на предположении, что:",
      "Variants": [
        "чем меньше обнаружено и устранено ошибок в продукте при испытаниях, тем выше его качество"
      ]
    },
    {
      "Text": "84. Инженерия качества - это:",
      "Variants": [
        "набор методов и мероприятий, с помощью которых программные продукты проверяются на выполнение требований к качеству и снабжаются характеристиками, предусмотренными в требованиях на ПО"
      ]
    },
    {
      "Text": "85. Планирование качества представляет собой:",
      "Variants": [
        "деятельность, направленную на определение целей и требований к качеству"
      ]
    },
    {
      "Text": "86. ПС следует относить к классу:",
      "Variants": [
        "невосстанавливаемых систем"
      ]
    },
    {
      "Text": "87. Интенсивность отказов - это:",
      "Variants": [
        "частота появления отказов или дефектов в ПС при ее тестировании или эксплуатации"
      ]
    },
    {
      "Text": "88. Абстрагирование - это:",
      "Variants": [
        "выделение существенных аспектов системы и отвлечение от несущественных"
      ]
    },
    {
      "Text": "89. Сущность структурного подхода к разработке ПС - это:",
      "Variants": [
        "декомпозиция (разбиение) системы на автоматизируемые функции, которые в свою очередь делятся на подфункции, на задачи и так далее"
      ]
    },
    {
      "Text": "90. Объектно-ориентированный подход (ООП) - это:",
      "Variants": [
        "стратегия разработки, в рамках которой разработчики системы вместо операций и функций мыслят объектами"
      ]
    }
  ]
}